import config
import logging
import keyboard
import messages

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentType

# log
logging.basicConfig(level=logging.INFO)

# init
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)

# prices
PRICE1 = types.LabeledPrice(label="–ß–µ–∫-–ª–∏—Å—Ç", amount=500 * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)
PRICE2 = types.LabeledPrice(label="–ì–∞–π–¥", amount=600 * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)
PRICE3 = types.LabeledPrice(label="–ú–∏–Ω–∏ –∫—É—Ä—Å 6 –∫—É–±–∏–∫–æ–≤", amount=2990 * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)
PRICE4 = types.LabeledPrice(label="–ú–∏–Ω–∏ –∫—É—Ä—Å RESTART", amount=2990 * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)
PRICE5 = types.LabeledPrice(label="–ú–∏–Ω–∏ –∫—É—Ä—Å –±—ã—Å—Ç—Ä–∞—è —Å—É—à–∫–∞", amount=2990 * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)
PRICE6 = types.LabeledPrice(label="–ú–∞—Ä–∞—Ñ–æ–Ω 21 –¥–µ–Ω—å", amount=1000 * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)
PRICE7 = types.LabeledPrice(label="–ö–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à—Ü", amount=299 * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)
PRICE8 = types.LabeledPrice(label="–ö–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–ª—å–µ—Ñ", amount=299 * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
def check_sub_channel(chat_member):
    print(chat_member['status'])
    if chat_member['status'] != 'left':
        return True
    else:
        return False

# start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    with open('jock.jpg', 'rb') as photo:
        await bot.send_photo(message.chat.id, photo=photo, caption=messages.start_message, parse_mode='MarkdownV2', reply_markup=keyboard.courses_kb1)


# menu
@dp.message_handler(text=['–ú–µ–Ω—é'])
async def start(message: types.Message):
    await bot.send_message(message.chat.id,
                           text="–ü—Ä–∏–≤–µ—Ç!\n" + "–í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üôèüèª",
                           reply_markup=keyboard.courses_kb1)


# –ß–µ–∫-–ª–∏—Å—Ç –∏ –≥–∞–π–¥—ã
@dp.message_handler(text=['–ß–µ–∫ –ª–∏—Å—Ç—ã/–≥–∞–π–¥—ã'])
async def start(message: types.Message):
    await bot.send_message(message.chat.id,
                           text=messages.info_check_list,
                           reply_markup=keyboard.course1_kb2)
    # if check_sub_channel(await bot.get_chat_member(chat_id=config.CHANNEL_ID, user_id=message.from_user.id)) == False:
    #     await bot.send_message(message.chat.id, text=messages.NOT_SUB_MESSAGE, reply_markup=keyboard.course1_kb2)



# –ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ —Å–ø–æ—Ä—Ç–∏–≤—ã–Ω–µ –¥–æ–±–∞–≤–∫–∏
@dp.message_handler(text=['–°–ø–æ—Ä—Ç–∏–≤—ã–Ω–µ –¥–æ–±–∞–≤–∫–∏'])
async def start(message: types.Message):
    if check_sub_channel(await bot.get_chat_member(chat_id=config.CHANNEL_ID, user_id=message.from_user.id)):
        with open('sports_supplements.pdf', 'rb') as file:
            await bot.send_document(message.chat.id, document=file, caption='–í–∞—à –≥–∞–π–¥', reply_markup=keyboard.course1_kb2)
    else:
        await bot.send_message(message.chat.id, text=messages.NOT_SUB_MESSAGE, reply_markup=keyboard.course1_kb2)



# –≥–∞–π–¥ –∫–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à—Ü
@dp.message_handler(text=['–ö–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à—Ü'])
async def start(message: types.Message):
    await bot.send_message(message.chat.id, text=messages.info_guide_on_how_to_train_to_gain_muscle, reply_markup=keyboard.course9_kb_guid)

# –ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ –∫–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à—Ü
@dp.message_handler(text=['–ö—É–ø–∏—Ç—å –≥–∞–π–¥ –∫–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à—Ü'])
async def buy(message: types.Message):
    if config.PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")
    await bot.send_message(message.chat.id, reply_markup=keyboard.courses_kb1, text=messages.text_for_gaids, parse_mode='MarkdownV2')
    await bot.send_invoice(message.chat.id,
                           title="–ü–æ–∫—É–ø–∫–∞ –≥–∞–π–¥–∞ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à—Ü",
                           description="–ì–∞–π–¥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
                           provider_token=config.PAYMENTS_TOKEN,
                           currency="rub",
                           photo_url="https://github.com/dimakpa/TG_courses/blob/main/invoice_train_to_gain_muscle.PNG?raw=true",
                           photo_width=512,
                           photo_height=512,
                           photo_size=416,
                           is_flexible=False,
                           prices=[PRICE7],
                           start_parameter="one-month-subscription",
                           payload="invoice-payload-set-of-muscles",
                           reply_markup=keyboard.keyboard_buy_1,
                           )



# –∫–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–ª—å–µ—Ñ
@dp.message_handler(text=['–ö–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–ª—å–µ—Ñ'])
async def start(message: types.Message):
    await bot.send_message(message.chat.id, text=messages.info_how_to_train_for_relief, reply_markup=keyboard.course10_kb_guid)

# –ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ –∫–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–ª—å–µ—Ñ
@dp.message_handler(text=['–ö—É–ø–∏—Ç—å –≥–∞–π–¥ –∫–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–ª—å–µ—Ñ'])
async def buy(message: types.Message):
    if config.PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

    await bot.send_message(message.chat.id, reply_markup=keyboard.courses_kb1, text=messages.text_for_gaids, parse_mode='MarkdownV2')
    await bot.send_invoice(message.chat.id,
                           title="–ü–æ–∫—É–ø–∫–∞ –≥–∞–π–¥–∞",
                           description="–ì–∞–π–¥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
                           provider_token=config.PAYMENTS_TOKEN,
                           currency="rub",
                           photo_url="https://github.com/dimakpa/TG_courses/blob/main/invoice_train_for_relief.PNG?raw=true",
                           photo_width=512,
                           photo_height=512,
                           photo_size=512,
                           is_flexible=False,
                           prices=[PRICE8],
                           start_parameter="one-month-subscription",
                           payload="invoice-payload-train-for-relief",
                           reply_markup=keyboard.keyboard_buy_1)



# –ö–æ–º–ø–ª–µ–∫—Å—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
@dp.message_handler(text=['–ö–æ–º–ø–ª–µ–∫—Å—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫'])
async def start(message: types.Message):
    await bot.send_message(message.chat.id,
                           text="–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω–∏ –∫—É—Ä—Å—ã",
                           reply_markup=keyboard.courses4_kb4)


# 6 –∫—É–±–∏–∫–æ–≤
@dp.message_handler(text=['6 –∫—É–±–∏–∫–æ–≤'])
async def start(message: types.Message):
    await bot.send_message(message.chat.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
                           reply_markup=keyboard.course3_kb2)

# –æ –∫—É—Ä—Å–µ 6 –∫—É–±–∏–∫–æ–≤
@dp.message_handler(text=['–û –∫—É—Ä—Å–µ 6 –∫—É–±–∏–∫–æ–≤'])
async def start(message: types.Message):
    await bot.send_message(message.chat.id,
                           text=messages.info_6_dice,
                           reply_markup=keyboard.course3_kb2)

# –û–ø–ª–∞—Ç–∏—Ç—å 6 –∫—É–±–∏–∫–æ–≤
@dp.message_handler(text=['–ö—É–ø–∏—Ç—å 6 –∫—É–±–∏–∫–æ–≤'])
async def buy(message: types.Message):
    if config.PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

    await bot.send_message(message.chat.id, reply_markup=keyboard.courses_kb1, text='–ß–µ–∫')
    await bot.send_invoice(message.chat.id,
                           title="–ü–æ–∫—É–ø–∫–∞ –º–∏–Ω–∏ –∫—É—Ä—Å–∞ 6 –∫—É–±–∏–∫–æ–≤",
                           description="–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∏–Ω–∏–∫—É—Ä—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤–∞–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã",
                           provider_token=config.PAYMENTS_TOKEN,
                           currency="rub",
                           photo_url="https://gbuenergiya.ru/wp-content/uploads/b/9/3/b93664f1a38a911f17c937d6ceee68c3.jpeg",
                           photo_width=416,
                           photo_height=234,
                           photo_size=416,
                           is_flexible=False,
                           prices=[PRICE3],
                           start_parameter="one-month-subscription",
                           payload="invoice-payload-6-dice",
                           reply_markup=keyboard.keyboard_buy_1)


# –î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –¥–æ–º–∞ / restart
@dp.message_handler(text=['–î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –¥–æ–º–∞ / restart'])
async def start(message: types.Message):
    with open('video.mp4', 'rb') as video:
        await bot.send_video(message.chat.id,
                             video=video,
                             caption="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
                             reply_markup=keyboard.course5_kb2,
                             width=720,
                             height=1280)
    # await bot.send_message(message.chat.id,
    #                        text="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
    #                        reply_markup=keyboard.course5_kb2)

# –æ –∫—É—Ä—Å–µ –î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –¥–æ–º–∞ / restart
@dp.message_handler(text=['–î–ª—è –∫–æ–≥–æ?'])
async def start(message: types.Message):
    await bot.send_message(message.chat.id,
                           text=messages.info_RESTART,
                           reply_markup=keyboard.course5_kb2)


# –û–ø–ª–∞—Ç–∏—Ç—å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –¥–æ–º–∞ / restart
@dp.message_handler(text=['–ö—É–ø–∏—Ç—å RESTART'])
async def buy(message: types.Message):
    if config.PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

    await bot.send_message(message.chat.id, reply_markup=keyboard.courses_kb1, text='–ß–µ–∫')
    await bot.send_invoice(message.chat.id,
                           title="–ü–æ–∫—É–ø–∫–∞ –º–∏–Ω–∏ –∫—É—Ä—Å–∞ –¥–æ–º–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö / RESTART",
                           description="–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∏–Ω–∏–∫—É—Ä—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤–∞–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã",
                           provider_token=config.PAYMENTS_TOKEN,
                           currency="rub",
                           photo_url="https://gbuenergiya.ru/wp-content/uploads/b/9/3/b93664f1a38a911f17c937d6ceee68c3.jpeg",
                           photo_width=416,
                           photo_height=234,
                           photo_size=416,
                           is_flexible=False,
                           prices=[PRICE4],
                           start_parameter="one-month-subscription",
                           payload="invoice-payload-restart",
                           reply_markup=keyboard.keyboard_buy_1)


# –±—ã—Å—Ç—Ä–∞—è —Å—É—à–∫–∞
@dp.message_handler(text=['–ë—ã—Å—Ç—Ä–∞—è —Å—É—à–∫–∞'])
async def start(message: types.Message):
    await bot.send_message(message.chat.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
                           reply_markup=keyboard.course6_kb2)

# –æ –∫—É—Ä—Å–µ –±—ã—Å—Ç—Ä–∞—è —Å—É—à–∫–∞
@dp.message_handler(text=['–ë—ã—Å—Ç—Ä–∞—è —Å—É—à–∫–∞ - –¥–ª—è –∫–æ–≥–æ?'])
async def start(message: types.Message):
    await bot.send_message(message.chat.id,
                           text=messages.info_quick_drying,
                           reply_markup=keyboard.course6_kb2)

# –û–ø–ª–∞—Ç–∏—Ç—å –±—ã—Å—Ç—Ä–∞—è —Å—É—à–∫–∞
@dp.message_handler(text=['–ö—É–ø–∏—Ç—å –±—ã—Å—Ç—Ä—É—é —Å—É—à–∫—É'])
async def buy(message: types.Message):
    if config.PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

    await bot.send_message(message.chat.id, reply_markup=keyboard.courses_kb1, text='–ß–µ–∫')
    await bot.send_invoice(message.chat.id,
                           title="–ü–æ–∫—É–ø–∫–∞ –º–∏–Ω–∏ –∫—É—Ä—Å–∞ –±—ã—Å—Ç—Ä–∞—è —Å—É—à–∫–∞",
                           description="–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∏–Ω–∏–∫—É—Ä—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤–∞–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã",
                           provider_token=config.PAYMENTS_TOKEN,
                           currency="rub",
                           photo_url="https://gbuenergiya.ru/wp-content/uploads/b/9/3/b93664f1a38a911f17c937d6ceee68c3.jpeg",
                           photo_width=416,
                           photo_height=234,
                           photo_size=416,
                           is_flexible=False,
                           prices=[PRICE5],
                           start_parameter="one-month-subscription",
                           payload="invoice-payload-quick-drying",
                           reply_markup=keyboard.keyboard_buy_1)


# –ú–∞—Ä–∞—Ñ–æ–Ω 21 –¥–µ–Ω—å
@dp.message_handler(text=['–ú–∞—Ä–∞—Ñ–æ–Ω'])
async def start(message: types.Message):
    await bot.send_message(message.chat.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
                           reply_markup=keyboard.course7_kb2)


# –û –º–∞—Ä–∞—Ñ–æ–Ω–µ
@dp.message_handler(text=['–û –º–∞—Ä–∞—Ñ–æ–Ω–µ'])
async def buy(message: types.Message):
    with open('video2.MOV', 'rb') as video2:
        await bot.send_video(message.chat.id,
                             video=video2,
                             parse_mode='MarkdownV2',
                             caption=messages.info_marathon,
                             reply_markup=keyboard.course7_kb2,
                             width=720,
                             height=1280)


# –ú–∞—Ä–∞—Ñ–æ–Ω —Ö–æ—á—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å
@dp.message_handler(text=['–•–æ—á—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!'])
async def buy(message: types.Message):
    await bot.send_message(message.chat.id,
                           text=messages.info_want_a_marathon,
                           parse_mode='MarkdownV2',
                           reply_markup=keyboard.course7_kb2)

# –°–æ—Ü—Å–µ—Ç–∏
@dp.message_handler(text=['–°–æ—Ü.—Å–µ—Ç–∏'])
async def start(message: types.Message):
    await bot.send_message(message.chat.id,
                           text=messages.social_network,
                           reply_markup=keyboard.courses_kb1)

# –û–±–æ –º–Ω–µ
@dp.message_handler(text=['–û–±–æ –º–Ω–µ'])
async def start(message: types.Message):
    with open('jock1.jpg', 'rb') as photo1, open('jock2.jpg', 'rb') as photo2, open('jock3.jpg', 'rb') as photo3, open('jock4.jpg', 'rb') as photo4, open('jock5.jpg', 'rb') as photo5:
        media = types.MediaGroup()
        media.attach_photo(photo1)
        media.attach_photo(photo2)
        media.attach_photo(photo3)
        media.attach_photo(photo4)
        media.attach_photo(photo5)
        await bot.send_media_group(message.chat.id, media)
        # await bot.send_photo(message.chat.id, )#photos=[photo1, photo2, photo3, photo4, photo5])
    await bot.send_message(message.chat.id,
                           text=messages.about_me,
                           reply_markup=keyboard.courses_kb1)


# pre checkout  (must be answered in 10 seconds)
@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


# successful payment
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    print("SUCCESSFUL PAYMENT:")
    payment_info = message.successful_payment.to_python()
    print(payment_info)
    print(payment_info['invoice_payload'])
    for k, v in payment_info.items():
        print(f"{k} = {v}")
    await bot.send_message(message.chat.id,
                           f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!")
    if payment_info['invoice_payload'] == "invoice-payload-train-for-relief":
        with open('train_for_relief.pdf', 'rb') as file:
            await bot.send_document(message.chat.id, document=file, caption='–í–∞—à –≥–∞–π–¥ "–ö–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–ª—å–µ—Ñ?"\n ',
                                    reply_markup=keyboard.courses_kb1)
    if payment_info['invoice_payload'] == "invoice-payload-set-of-muscles":
        with open('gaid_set_of_muscles.pdf', 'rb') as file:
            await bot.send_document(message.chat.id, document=file, caption='–í–∞—à –≥–∞–π–¥ "–ö–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–æ—Å—Ç –º—ã—à—Ü?"',
                                    reply_markup=keyboard.courses_kb1)
    if payment_info['invoice_payload'] == "invoice-payload-6-dice":
        await bot.send_message(message.chat.id, messages.link_6_dice)
    if payment_info['invoice_payload'] == "invoice-payload-restart":
        await bot.send_message(message.chat.id, messages.link_RESTART)
    if payment_info['invoice_payload'] == "invoice-payload-quick-drying":
        await bot.send_message(message.chat.id, messages.link_quick_drying)
    if payment_info['invoice_payload'] == "invoice-payload-marathon":
        await bot.send_message(message.chat.id, messages.link_marathon)


# run long-polling
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=False)
